// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 String    @id @default(cuid())
  role               UserRole  @default(ADMIN)
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  isTwoFactorEnabled Boolean   @default(false)
  accounts           Account[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}

model Store {
  id         String      @id @unique @default(cuid())
  userId     String
  name       String
  creaatedAt DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards BillBoard[]
  Category   Category[]
  sizes      Sizes[]
  colors     Color[]
  Product    Product[]
  Order      Order[]
  Banner     Banner?
}

model BillBoard {
  id        String     @id @unique @default(cuid())
  storeId   String
  store     Store      @relation(fields: [storeId], references: [id])
  label     String
  imgUrl    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  categroy  Category[]
}

model Category {
  id          String    @id @unique @default(cuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String
  billboard   BillBoard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
  Banner      Banner?
}

model Sizes {
  id        String    @id @unique @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Color {
  id        String    @id @unique @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id         String @id @unique @default(cuid())
  storeId    String
  categoryId String
  colorId    String
  sizeId     String

  store    Store    @relation(fields: [storeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  color    Color    @relation(fields: [colorId], references: [id])
  size     Sizes    @relation(fields: [sizeId], references: [id])
  Image    Image[]

  price      Decimal
  name       String
  isFeatured Boolean
  isArchived Boolean
  createdAt  DateTime    @default(now())
  updatedAT  DateTime    @updatedAt
  OrderItem  OrderItem[]
}

model Image {
  id        String   @id @unique @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  ulr       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @unique @default(cuid())
  orderId    String
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  phone      String      @default("")
  address    String      @default("")
  OrderItem  OrderItem[]
  totalPrice Decimal     @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  isPaid     Boolean     @default(false)
}

model OrderItem {
  id        String  @id @unique @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
}

model Banner {
  id         String    @id @unique @default(cuid())
  name       String
  offer      Int?
  storeId    String
  store      Store     @relation(fields: [storeId], references: [id])
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  @@unique([storeId])
  @@unique([categoryId])
}
